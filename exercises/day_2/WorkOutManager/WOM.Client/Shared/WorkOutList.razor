@using WOM.Models;
@using WOM.Client.ViewModels;

@inject WorkOutViewModel ViewModel

<h2>WorkOut List</h2>
<p>
    Show all workouts:
    <input type="checkbox" @bind-value="ViewModel.ShowAll" />
</p>
<p>
    Sort by Created on:
    <input type="checkbox" @bind-value="ViewModel.SortByCreatedOn" />
</p>
@if (ViewModel.ShowAll && !ViewModel.SortByCreatedOn)
{
    <p>
        Completed then non Completed:
        <input type="checkbox" @bind-value="ViewModel.SortByCompletedOn" />
    </p>
}
<p>Enter new item:</p>
@if (ViewModel.ValidationErrors)
{
    <WorkOutErrors Errors="@ViewModel.Errors"></WorkOutErrors>
}
<p>
    <input name="newItem" type="text"
           @ref="InputBox"
           @attributes="inputAttributes"
           @bind-value="@ViewModel.NewDescription"
           @bind-value:event="oninput" />
    <button @attributes="btnAttributes"
            @onclick="@(async () => await ViewModel.AddNewAsync())">
        Save
    </button>
</p>

@if (workOuts == null || ViewModel.Loading)
{
    <p>LOADING.....</p>
}
else
{
    @foreach (var workOut in workOuts)
    {
        <hr />
        <WorkOutShow CurrentItem="@workOut"
                     Delete="@(async () => await ViewModel.DeleteAsync(workOut))"
                     MarkAsComplete="@(async () => await ViewModel.MarkWorkOutAsDoneAsync(workOut))"></WorkOutShow>
    }
}

@code {
    public ElementReference InputBox;
    public List<WorkOut> workOuts;
    public Dictionary<string, object> btnAttributes = new Dictionary<string, object>()
{
        { "disabled", "" }
    };
    public Dictionary<string, object> inputAttributes = new Dictionary<string, object>()
    { };

    protected override async Task OnInitializedAsync()
    {
        workOuts = (await ViewModel.WorkOutAsync()).ToList();
        ViewModel.NewDescription = string.Empty;
        ViewModel.PropertyChanged += async (o, e) =>
        {
            CheckButton();
            if (e.PropertyName.Equals(nameof(ViewModel.WorkOutAsync)))
            {
                workOuts = (await ViewModel.WorkOutAsync()).ToList();
            }
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }

    private void CheckButton()
    {
        btnAttributes.Clear();
        inputAttributes.Clear();
        if (ViewModel.Loading)
        {
            btnAttributes.Add("disabled", "");
            inputAttributes.Add("disabled", "");
        }
        else if (ViewModel.ValidationErrors)
        {
            btnAttributes.Add("disabled", "");
            inputAttributes.Add("class", "alert-danger");
        }
    }
}
