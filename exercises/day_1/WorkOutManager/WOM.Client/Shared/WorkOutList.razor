@using WOM.Models;
@using WOM.Client.ViewModels;

@inject WorkOutViewModel ViewModel

<h2>WorkOut List</h2>

<p>Enter new item:</p>
@if (ViewModel.ValidationErrors)
{
    <WorkOutErrors Errors="@ViewModel.Errors"></WorkOutErrors>
}
<p>
    <input name="newItem" type="text"
           @ref="InputBox"
           @bind-value="@ViewModel.NewDescription"
           @bind-value:event="oninput"/>
    <button @onclick="@(async () => await ViewModel.AddNewAsync())">
        Save
    </button>
</p>

@if (workOuts == null)
{
    <p>LOADING.....</p>
}
else
{
    @foreach (var workOut in workOuts)
    {
        <hr />
        <WorkOutShow CurrentItem="@workOut"></WorkOutShow>
    }
}

@code {
    public ElementReference InputBox;
    public List<WorkOut> workOuts;

    protected override async Task OnInitializedAsync()
    {
        workOuts = (await ViewModel.WorkOutAsync()).ToList();
        ViewModel.NewDescription = string.Empty;
        ViewModel.PropertyChanged += async (o, e) =>
        {
            if (e.PropertyName.Equals(nameof(ViewModel.WorkOutAsync)))
            {
                workOuts = (await ViewModel.WorkOutAsync()).ToList();
            }
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }
}
