@using GM.Models;
@using GM.Client.ViewModels;

@inject GroceryViewModel viewModel;

<div class="row"><div class="col-sm">
<p>Add new item:
@if (viewModel.ValidationErrors)
{
    <GroceryError Errors="@viewModel.Errors"></GroceryError>
}
    <input name="newItem" type="text"
           @ref="InputBox"
           @attributes="inputAttributes"
           @bind-value="@viewModel.NewName"
           @bind-value:event="oninput" />
    <button @attributes="btnAttributes"
            @onclick="@(async () => await viewModel.AddNewAsync())">
        Save
    </button>
</p>
</div></div>

<div class="row">
    <div class="col-sm">
        <p>Show all items (incl. expired):
        <input type="checkbox" @bind-value="viewModel.ShowAll" />
        </p>
    </div>
    <div class="col-sm">
        <p>Sort by created on:
        <input type="checkbox" @bind-value="viewModel.SortByCreatedOn" />
        </p>
    </div>
    <div class="col-sm">
        @if (viewModel.ShowAll && !viewModel.SortByCreatedOn)
        {
        <p>
            Sort by expired on:
            <input type="checkbox" @bind-value="viewModel.SortByExpiredOn" />
        </p>
        }
    </div>
</div>

@if (groceries == null || viewModel.Loading)
{
    <p class="alert alert-dark">Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th scope="col">Item name</th>
                    <th scope="col">Created on</th>
                    <th scope="col">Expired on</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Grocery grocery in groceries)
                {
                    <GroceryShow CurrentItem="@grocery"
                                 Delete="@(async () => await viewModel.DeleteAsync(grocery))"
                                 MarkAsExpired="@(async () => await viewModel.MarkGroceryAsExpiredAsync(grocery))"></GroceryShow>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public ElementReference InputBox;
    public List<Grocery> groceries;

    public Dictionary<string, object> btnAttributes = new Dictionary<string, object>()
{
{ "disabled", "" }
};
    public Dictionary<string, object> inputAttributes = new Dictionary<string, object>() { };

    private void CheckButton()
    {
        btnAttributes.Clear();
        inputAttributes.Clear();
        if (viewModel.Loading)
        {
            btnAttributes.Add("disabled", "");
            inputAttributes.Add("disabled", "");
        }
        else if (viewModel.ValidationErrors)
        {
            btnAttributes.Add("disabled", "");
            inputAttributes.Add("class", "alert-danger");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        groceries = (await viewModel.GroceryAsync()).ToList();
        viewModel.PropertyChanged += async (o, e) =>
        {
            CheckButton();
            if (e.PropertyName.Equals(nameof(viewModel.GroceryAsync)))
            {
                groceries = (await viewModel.GroceryAsync()).ToList();
            }
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }
}
